{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport { getLeftStyles, getRightStyles } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n/**\n * A component to show tiles inside a List.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple\n */\nconst ListItem = _ref => {\n  let {\n    left,\n    right,\n    title,\n    description,\n    onPress,\n    theme: themeOverrides,\n    style,\n    titleStyle,\n    titleNumberOfLines = 1,\n    descriptionNumberOfLines = 2,\n    titleEllipsizeMode,\n    descriptionEllipsizeMode,\n    descriptionStyle,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const [alignToTop, setAlignToTop] = React.useState(false);\n  const onDescriptionTextLayout = event => {\n    if (!theme.isV3) {\n      return;\n    }\n    const {\n      nativeEvent\n    } = event;\n    setAlignToTop(nativeEvent.lines.length >= 2);\n  };\n  const renderDescription = (descriptionColor, description) => {\n    return typeof description === 'function' ? description({\n      selectable: false,\n      ellipsizeMode: descriptionEllipsizeMode,\n      color: descriptionColor,\n      fontSize: styles.description.fontSize\n    }) : /*#__PURE__*/React.createElement(Text, {\n      selectable: false,\n      numberOfLines: descriptionNumberOfLines,\n      ellipsizeMode: descriptionEllipsizeMode,\n      style: [styles.description, {\n        color: descriptionColor\n      }, descriptionStyle],\n      onTextLayout: onDescriptionTextLayout\n    }, description);\n  };\n  const renderTitle = () => {\n    const titleColor = theme.isV3 ? theme.colors.onSurface : color(theme.colors.text).alpha(0.87).rgb().string();\n    return typeof title === 'function' ? title({\n      selectable: false,\n      ellipsizeMode: titleEllipsizeMode,\n      color: titleColor,\n      fontSize: styles.title.fontSize\n    }) : /*#__PURE__*/React.createElement(Text, {\n      selectable: false,\n      ellipsizeMode: titleEllipsizeMode,\n      numberOfLines: titleNumberOfLines,\n      style: [styles.title, {\n        color: titleColor\n      }, titleStyle]\n    }, title);\n  };\n  const descriptionColor = theme.isV3 ? theme.colors.onSurfaceVariant : color(theme.colors.text).alpha(0.54).rgb().string();\n  return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n    style: [theme.isV3 ? styles.containerV3 : styles.container, style],\n    onPress: onPress,\n    theme: theme\n  }), /*#__PURE__*/React.createElement(View, {\n    style: theme.isV3 ? styles.rowV3 : styles.row\n  }, left ? left({\n    color: descriptionColor,\n    style: getLeftStyles(alignToTop, description, theme.isV3)\n  }) : null, /*#__PURE__*/React.createElement(View, {\n    style: [theme.isV3 ? styles.itemV3 : styles.item, styles.content]\n  }, renderTitle(), description ? renderDescription(descriptionColor, description) : null), right ? right({\n    color: descriptionColor,\n    style: getRightStyles(alignToTop, description, theme.isV3)\n  }) : null));\n};\nListItem.displayName = 'List.Item';\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  containerV3: {\n    paddingVertical: 8,\n    paddingRight: 24\n  },\n  row: {\n    width: '100%',\n    flexDirection: 'row'\n  },\n  rowV3: {\n    width: '100%',\n    flexDirection: 'row',\n    marginVertical: 6\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8\n  },\n  itemV3: {\n    paddingLeft: 16\n  },\n  content: {\n    flexShrink: 1,\n    flexGrow: 1,\n    justifyContent: 'center'\n  }\n});\nexport default ListItem;","map":{"version":3,"names":["React","StyleSheet","View","color","getLeftStyles","getRightStyles","useInternalTheme","TouchableRipple","Text","ListItem","_ref","left","right","title","description","onPress","theme","themeOverrides","style","titleStyle","titleNumberOfLines","descriptionNumberOfLines","titleEllipsizeMode","descriptionEllipsizeMode","descriptionStyle","rest","alignToTop","setAlignToTop","useState","onDescriptionTextLayout","event","isV3","nativeEvent","lines","length","renderDescription","descriptionColor","selectable","ellipsizeMode","fontSize","styles","createElement","numberOfLines","onTextLayout","renderTitle","titleColor","colors","onSurface","text","alpha","rgb","string","onSurfaceVariant","_extends","containerV3","container","rowV3","row","itemV3","item","content","displayName","create","padding","paddingVertical","paddingRight","width","flexDirection","marginVertical","paddingLeft","flexShrink","flexGrow","justifyContent"],"sources":["C:\\Users\\Leonidas\\Desktop\\SongRecommendationTool\\src\\srt\\node_modules\\react-native-paper\\src\\components\\List\\ListItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  NativeSyntheticEvent,\n  StyleProp,\n  StyleSheet,\n  TextLayoutEventData,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { Style, getLeftStyles, getRightStyles } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, EllipsizeProp, ThemeProp } from '../../types';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n\ntype Title =\n  | React.ReactNode\n  | ((props: {\n      selectable: boolean;\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      selectable: boolean;\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: Title;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string; style: Style }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { color: string; style?: Style }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple\n */\nconst ListItem = ({\n  left,\n  right,\n  title,\n  description,\n  onPress,\n  theme: themeOverrides,\n  style,\n  titleStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  titleEllipsizeMode,\n  descriptionEllipsizeMode,\n  descriptionStyle,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const [alignToTop, setAlignToTop] = React.useState(false);\n\n  const onDescriptionTextLayout = (\n    event: NativeSyntheticEvent<TextLayoutEventData>\n  ) => {\n    if (!theme.isV3) {\n      return;\n    }\n    const { nativeEvent } = event;\n    setAlignToTop(nativeEvent.lines.length >= 2);\n  };\n\n  const renderDescription = (\n    descriptionColor: string,\n    description?: Description | null\n  ) => {\n    return typeof description === 'function' ? (\n      description({\n        selectable: false,\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        selectable={false}\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n        onTextLayout={onDescriptionTextLayout}\n      >\n        {description}\n      </Text>\n    );\n  };\n\n  const renderTitle = () => {\n    const titleColor = theme.isV3\n      ? theme.colors.onSurface\n      : color(theme.colors.text).alpha(0.87).rgb().string();\n\n    return typeof title === 'function' ? (\n      title({\n        selectable: false,\n        ellipsizeMode: titleEllipsizeMode,\n        color: titleColor,\n        fontSize: styles.title.fontSize,\n      })\n    ) : (\n      <Text\n        selectable={false}\n        ellipsizeMode={titleEllipsizeMode}\n        numberOfLines={titleNumberOfLines}\n        style={[styles.title, { color: titleColor }, titleStyle]}\n      >\n        {title}\n      </Text>\n    );\n  };\n\n  const descriptionColor = theme.isV3\n    ? theme.colors.onSurfaceVariant\n    : color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      style={[theme.isV3 ? styles.containerV3 : styles.container, style]}\n      onPress={onPress}\n      theme={theme}\n    >\n      <View style={theme.isV3 ? styles.rowV3 : styles.row}>\n        {left\n          ? left({\n              color: descriptionColor,\n              style: getLeftStyles(alignToTop, description, theme.isV3),\n            })\n          : null}\n        <View\n          style={[theme.isV3 ? styles.itemV3 : styles.item, styles.content]}\n        >\n          {renderTitle()}\n\n          {description\n            ? renderDescription(descriptionColor, description)\n            : null}\n        </View>\n        {right\n          ? right({\n              color: descriptionColor,\n              style: getRightStyles(alignToTop, description, theme.isV3),\n            })\n          : null}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nListItem.displayName = 'List.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  containerV3: {\n    paddingVertical: 8,\n    paddingRight: 24,\n  },\n  row: {\n    width: '100%',\n    flexDirection: 'row',\n  },\n  rowV3: {\n    width: '100%',\n    flexDirection: 'row',\n    marginVertical: 6,\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  itemV3: {\n    paddingLeft: 16,\n  },\n  content: {\n    flexShrink: 1,\n    flexGrow: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default ListItem;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}