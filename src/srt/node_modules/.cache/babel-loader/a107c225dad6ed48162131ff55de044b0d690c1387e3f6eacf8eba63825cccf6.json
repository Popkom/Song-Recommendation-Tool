{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { I18nManager, Platform, StyleSheet, TextInput as NativeTextInput, View, Animated } from 'react-native';\nimport { Underline } from './Addons/Underline';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\nimport TextInputAdornment from './Adornment/TextInputAdornment';\nimport { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from './Adornment/TextInputAdornment';\nimport { ADORNMENT_SIZE, LABEL_PADDING_TOP_DENSE, LABEL_WIGGLE_X_OFFSET, MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_Y_OFFSET, MIN_DENSE_HEIGHT, MIN_DENSE_HEIGHT_WL } from './constants';\nimport { adjustPaddingFlat, calculateFlatAffixTopPosition, calculateFlatInputHorizontalPadding, calculateInputHeight, calculateLabelTopPosition, calculatePadding, getConstants, getFlatInputColors } from './helpers';\nimport InputLabel from './Label/InputLabel';\nconst TextInputFlat = _ref => {\n  let {\n    disabled = false,\n    editable = true,\n    label,\n    error = false,\n    selectionColor: customSelectionColor,\n    cursorColor,\n    underlineColor,\n    underlineStyle,\n    activeUnderlineColor,\n    textColor,\n    dense,\n    style,\n    theme,\n    render = props => /*#__PURE__*/React.createElement(NativeTextInput, props),\n    multiline = false,\n    parentState,\n    innerRef,\n    onFocus,\n    forceFocus,\n    onBlur,\n    onChangeText,\n    onLayoutAnimatedText,\n    onLabelTextLayout,\n    onLeftAffixLayoutChange,\n    onRightAffixLayoutChange,\n    left,\n    right,\n    placeholderTextColor,\n    testID = 'text-input-flat',\n    contentStyle,\n    ...rest\n  } = _ref;\n  const isAndroid = Platform.OS === 'android';\n  const {\n    colors,\n    isV3,\n    roundness\n  } = theme;\n  const font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n  const {\n    LABEL_PADDING_TOP,\n    FLAT_INPUT_OFFSET,\n    MIN_HEIGHT\n  } = getConstants(isV3);\n  const {\n    fontSize: fontSizeStyle,\n    lineHeight: lineHeightStyle,\n    fontWeight,\n    height,\n    paddingHorizontal,\n    textAlign,\n    ...viewStyle\n  } = StyleSheet.flatten(style) || {};\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  const lineHeight = lineHeightStyle || fontSize * 1.2;\n  const isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right\n  });\n  let {\n    paddingLeft,\n    paddingRight\n  } = calculateFlatInputHorizontalPadding({\n    adornmentConfig,\n    isV3\n  });\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal;\n    paddingRight = paddingHorizontal;\n  }\n  const {\n    leftLayout,\n    rightLayout\n  } = parentState;\n  const rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  const leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig,\n    rightAffixWidth,\n    leftAffixWidth,\n    paddingHorizontal,\n    inputOffset: FLAT_INPUT_OFFSET,\n    mode: InputMode.Flat,\n    isV3\n  });\n  const {\n    inputTextColor,\n    activeColor,\n    underlineColorCustom,\n    placeholderColor,\n    errorColor,\n    backgroundColor,\n    selectionColor\n  } = getFlatInputColors({\n    underlineColor,\n    activeUnderlineColor,\n    customSelectionColor,\n    textColor,\n    disabled,\n    error,\n    theme\n  });\n  const containerStyle = {\n    backgroundColor,\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness\n  };\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n  const baseLabelTranslateX = (I18nManager.getConstants().isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (I18nManager.getConstants().isRTL ? -1 : 1) * paddingLeft;\n  const minInputHeight = dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  const topPosition = calculateLabelTopPosition(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid,\n    styles: StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)\n  };\n  const pad = calculatePadding(paddingSettings);\n  const paddingFlat = adjustPaddingFlat({\n    ...paddingSettings,\n    pad\n  });\n  const baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n  const {\n    current: placeholderOpacityAnims\n  } = React.useRef([new Animated.Value(0), new Animated.Value(1)]);\n  const placeholderOpacity = hasActiveOutline ? parentState.labeled : placeholderOpacityAnims[parentState.labelLayout.measured ? 1 : 0];\n  const minHeight = height || (dense ? label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  const flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);\n  const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n  const leftAffixTopPosition = leftLayout.height ? calculateFlatAffixTopPosition({\n    height: flatHeight,\n    ...paddingFlat,\n    affixHeight: leftLayout.height\n  }) : null;\n  const rightAffixTopPosition = rightLayout.height ? calculateFlatAffixTopPosition({\n    height: flatHeight,\n    ...paddingFlat,\n    affixHeight: rightLayout.height\n  }) : null;\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    onLabelTextLayout,\n    placeholderOpacity,\n    labelError: error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    paddingLeft: isAndroid ? I18nManager.isRTL ? paddingRight : paddingLeft : paddingLeft,\n    paddingRight: isAndroid ? I18nManager.isRTL ? paddingLeft : paddingRight : paddingRight,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    errorColor,\n    roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID,\n    contentStyle,\n    opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1\n  };\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange\n  };\n  let adornmentProps = {\n    paddingHorizontal,\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Affix]: affixTopPosition,\n      [AdornmentType.Icon]: iconTopPosition\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    disabled\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: {\n        ...font,\n        fontSize,\n        lineHeight,\n        fontWeight\n      },\n      visible: parentState.labeled\n    };\n  }\n  return /*#__PURE__*/React.createElement(View, {\n    style: [containerStyle, viewStyle]\n  }, /*#__PURE__*/React.createElement(Underline, {\n    style: underlineStyle,\n    hasActiveOutline: hasActiveOutline,\n    parentState: parentState,\n    underlineColorCustom: underlineColorCustom,\n    error: error,\n    colors: colors,\n    activeColor: activeColor,\n    theme: theme\n  }), /*#__PURE__*/React.createElement(View, {\n    style: [styles.labelContainer, {\n      minHeight\n    }]\n  }, !isAndroid && multiline && !!label && !disabled && /*#__PURE__*/\n  // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n  // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n  React.createElement(View, {\n    testID: \"patch-container\",\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, dense ? styles.densePatchContainer : styles.patchContainer, {\n      backgroundColor: viewStyle.backgroundColor || containerStyle.backgroundColor,\n      left: paddingLeft,\n      right: paddingRight\n    }]\n  }), label ? /*#__PURE__*/React.createElement(InputLabel, _extends({\n    labeled: parentState.labeled,\n    error: parentState.error,\n    focused: parentState.focused,\n    wiggle: Boolean(parentState.value && labelProps.labelError),\n    labelLayoutMeasured: parentState.labelLayout.measured,\n    labelLayoutWidth: parentState.labelLayout.width\n  }, labelProps)) : null, render === null || render === void 0 ? void 0 : render({\n    ...rest,\n    ref: innerRef,\n    onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    editable: !disabled && editable,\n    selectionColor,\n    cursorColor: typeof cursorColor === 'undefined' ? activeColor : cursorColor,\n    placeholderTextColor: placeholderTextColor ?? placeholderColor,\n    onFocus,\n    onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: flatHeight\n    } : {}, paddingFlat, {\n      paddingLeft,\n      paddingRight,\n      ...font,\n      fontSize,\n      lineHeight,\n      fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.getConstants().isRTL ? 'right' : 'left',\n      minWidth: parentState.labelTextLayout.width + 2 * FLAT_INPUT_OFFSET\n    }, Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput, contentStyle],\n    testID\n  })), /*#__PURE__*/React.createElement(TextInputAdornment, adornmentProps));\n};\nexport default TextInputFlat;\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0\n  },\n  input: {\n    margin: 0\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2\n  }\n});","map":{"version":3,"names":["React","I18nManager","Platform","StyleSheet","TextInput","NativeTextInput","View","Animated","Underline","AdornmentSide","AdornmentType","InputMode","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","ADORNMENT_SIZE","LABEL_PADDING_TOP_DENSE","LABEL_WIGGLE_X_OFFSET","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_Y_OFFSET","MIN_DENSE_HEIGHT","MIN_DENSE_HEIGHT_WL","adjustPaddingFlat","calculateFlatAffixTopPosition","calculateFlatInputHorizontalPadding","calculateInputHeight","calculateLabelTopPosition","calculatePadding","getConstants","getFlatInputColors","InputLabel","TextInputFlat","_ref","disabled","editable","label","error","selectionColor","customSelectionColor","cursorColor","underlineColor","underlineStyle","activeUnderlineColor","textColor","dense","style","theme","render","props","createElement","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLabelTextLayout","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","testID","contentStyle","rest","isAndroid","OS","colors","isV3","roundness","font","fonts","bodyLarge","regular","hasActiveOutline","focused","LABEL_PADDING_TOP","FLAT_INPUT_OFFSET","MIN_HEIGHT","fontSize","fontSizeStyle","lineHeight","lineHeightStyle","fontWeight","height","paddingHorizontal","textAlign","viewStyle","flatten","isPaddingHorizontalPassed","undefined","adornmentConfig","paddingLeft","paddingRight","leftLayout","rightLayout","rightAffixWidth","width","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","inputOffset","mode","Flat","inputTextColor","activeColor","underlineColorCustom","placeholderColor","errorColor","backgroundColor","containerStyle","borderTopLeftRadius","borderTopRightRadius","labelScale","fontScale","labelWidth","labelLayout","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","isRTL","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","styles","inputFlatDense","inputFlat","pad","paddingFlat","baseLabelTranslateY","current","placeholderOpacityAnims","useRef","Value","placeholderOpacity","labeled","measured","minHeight","flatHeight","iconTopPosition","leftAffixTopPosition","affixHeight","rightAffixTopPosition","labelProps","labelError","placeholderStyle","placeholder","wiggleOffsetX","maxFontSizeMultiplier","opacity","value","affixTopPosition","Left","Right","onAffixChange","adornmentProps","Affix","Icon","isTextInputFocused","length","textStyle","visible","labelContainer","pointerEvents","absoluteFill","densePatchContainer","patchContainer","_extends","wiggle","Boolean","labelLayoutMeasured","labelLayoutWidth","ref","underlineColorAndroid","input","color","textAlignVertical","minWidth","labelTextLayout","outline","create","position","paddingTop","paddingBottom","margin","zIndex"],"sources":["C:\\Users\\Leonidas\\Desktop\\SongRecommendationTool\\src\\srt\\node_modules\\react-native-paper\\src\\components\\TextInput\\TextInputFlat.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  Platform,\n  StyleSheet,\n  TextInput as NativeTextInput,\n  TextStyle,\n  View,\n  Animated,\n} from 'react-native';\n\nimport { Underline } from './Addons/Underline';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\nimport TextInputAdornment, {\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n} from './Adornment/TextInputAdornment';\nimport {\n  ADORNMENT_SIZE,\n  LABEL_PADDING_TOP_DENSE,\n  LABEL_WIGGLE_X_OFFSET,\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_Y_OFFSET,\n  MIN_DENSE_HEIGHT,\n  MIN_DENSE_HEIGHT_WL,\n} from './constants';\nimport {\n  adjustPaddingFlat,\n  calculateFlatAffixTopPosition,\n  calculateFlatInputHorizontalPadding,\n  calculateInputHeight,\n  calculateLabelTopPosition,\n  calculatePadding,\n  getConstants,\n  getFlatInputColors,\n  Padding,\n} from './helpers';\nimport InputLabel from './Label/InputLabel';\nimport type { ChildTextInputProps, RenderProps } from './types';\n\nconst TextInputFlat = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor: customSelectionColor,\n  cursorColor,\n  underlineColor,\n  underlineStyle,\n  activeUnderlineColor,\n  textColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLabelTextLayout,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  testID = 'text-input-flat',\n  contentStyle,\n  ...rest\n}: ChildTextInputProps) => {\n  const isAndroid = Platform.OS === 'android';\n  const { colors, isV3, roundness } = theme;\n  const font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const { LABEL_PADDING_TOP, FLAT_INPUT_OFFSET, MIN_HEIGHT } =\n    getConstants(isV3);\n\n  const {\n    fontSize: fontSizeStyle,\n    lineHeight: lineHeightStyle,\n    fontWeight,\n    height,\n    paddingHorizontal,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  const lineHeight = lineHeightStyle || fontSize * 1.2;\n\n  const isPaddingHorizontalPassed =\n    paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right,\n  });\n\n  let { paddingLeft, paddingRight } = calculateFlatInputHorizontalPadding({\n    adornmentConfig,\n    isV3,\n  });\n\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal as number;\n    paddingRight = paddingHorizontal as number;\n  }\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      paddingHorizontal,\n      inputOffset: FLAT_INPUT_OFFSET,\n      mode: InputMode.Flat,\n      isV3,\n    });\n\n  const {\n    inputTextColor,\n    activeColor,\n    underlineColorCustom,\n    placeholderColor,\n    errorColor,\n    backgroundColor,\n    selectionColor,\n  } = getFlatInputColors({\n    underlineColor,\n    activeUnderlineColor,\n    customSelectionColor,\n    textColor,\n    disabled,\n    error,\n    theme,\n  });\n\n  const containerStyle = {\n    backgroundColor,\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness,\n  };\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.getConstants().isRTL ? 1 : -1) *\n      (labelHalfWidth - (labelScale * labelWidth) / 2) +\n    (1 - labelScale) *\n      (I18nManager.getConstants().isRTL ? -1 : 1) *\n      paddingLeft;\n\n  const minInputHeight = dense\n    ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE\n    : MIN_HEIGHT - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    multiline && height ? 0 : !height ? minInputHeight / 2 : 0\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid,\n    styles: StyleSheet.flatten(\n      dense ? styles.inputFlatDense : styles.inputFlat\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingFlat = adjustPaddingFlat({\n    ...paddingSettings,\n    pad,\n  });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n\n  const { current: placeholderOpacityAnims } = React.useRef([\n    new Animated.Value(0),\n    new Animated.Value(1),\n  ]);\n\n  const placeholderOpacity = hasActiveOutline\n    ? parentState.labeled\n    : placeholderOpacityAnims[parentState.labelLayout.measured ? 1 : 0];\n\n  const minHeight =\n    height ||\n    (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n\n  const flatHeight =\n    inputHeight +\n    (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n\n  const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n\n  const leftAffixTopPosition = leftLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: leftLayout.height,\n      })\n    : null;\n\n  const rightAffixTopPosition = rightLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: rightLayout.height,\n      })\n    : null;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    onLabelTextLayout,\n    placeholderOpacity,\n    labelError: error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    paddingLeft: isAndroid\n      ? I18nManager.isRTL\n        ? paddingRight\n        : paddingLeft\n      : paddingLeft,\n    paddingRight: isAndroid\n      ? I18nManager.isRTL\n        ? paddingLeft\n        : paddingRight\n      : paddingRight,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    errorColor,\n    roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID,\n    contentStyle,\n    opacity:\n      parentState.value || parentState.focused\n        ? parentState.labelLayout.measured\n          ? 1\n          : 0\n        : 1,\n  };\n\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    paddingHorizontal,\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Affix]: affixTopPosition,\n      [AdornmentType.Icon]: iconTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    disabled,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, lineHeight, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={[containerStyle, viewStyle]}>\n      <Underline\n        style={underlineStyle}\n        hasActiveOutline={hasActiveOutline}\n        parentState={parentState}\n        underlineColorCustom={underlineColorCustom}\n        error={error}\n        colors={colors}\n        activeColor={activeColor}\n        theme={theme}\n      />\n      <View\n        style={[\n          styles.labelContainer,\n          {\n            minHeight,\n          },\n        ]}\n      >\n        {!isAndroid && multiline && !!label && !disabled && (\n          // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n          // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n          <View\n            testID=\"patch-container\"\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              dense ? styles.densePatchContainer : styles.patchContainer,\n              {\n                backgroundColor:\n                  viewStyle.backgroundColor || containerStyle.backgroundColor,\n                left: paddingLeft,\n                right: paddingRight,\n              },\n            ]}\n          />\n        )}\n        {label ? (\n          <InputLabel\n            labeled={parentState.labeled}\n            error={parentState.error}\n            focused={parentState.focused}\n            wiggle={Boolean(parentState.value && labelProps.labelError)}\n            labelLayoutMeasured={parentState.labelLayout.measured}\n            labelLayoutWidth={parentState.labelLayout.width}\n            {...labelProps}\n          />\n        ) : null}\n        {render?.({\n          ...rest,\n          ref: innerRef,\n          onChangeText,\n          placeholder: label ? parentState.placeholder : rest.placeholder,\n          editable: !disabled && editable,\n          selectionColor,\n          cursorColor:\n            typeof cursorColor === 'undefined' ? activeColor : cursorColor,\n          placeholderTextColor: placeholderTextColor ?? placeholderColor,\n          onFocus,\n          onBlur,\n          underlineColorAndroid: 'transparent',\n          multiline,\n          style: [\n            styles.input,\n            !multiline || (multiline && height) ? { height: flatHeight } : {},\n            paddingFlat,\n            {\n              paddingLeft,\n              paddingRight,\n              ...font,\n              fontSize,\n              lineHeight,\n              fontWeight,\n              color: inputTextColor,\n              textAlignVertical: multiline ? 'top' : 'center',\n              textAlign: textAlign\n                ? textAlign\n                : I18nManager.getConstants().isRTL\n                ? 'right'\n                : 'left',\n              minWidth:\n                parentState.labelTextLayout.width + 2 * FLAT_INPUT_OFFSET,\n            },\n            Platform.OS === 'web' && { outline: 'none' },\n            adornmentStyleAdjustmentForNativeInput,\n            contentStyle,\n          ],\n          testID,\n        })}\n      </View>\n      <TextInputAdornment {...adornmentProps} />\n    </View>\n  );\n};\n\nexport default TextInputFlat;\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n  input: {\n    margin: 0,\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4,\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2,\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2,\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}