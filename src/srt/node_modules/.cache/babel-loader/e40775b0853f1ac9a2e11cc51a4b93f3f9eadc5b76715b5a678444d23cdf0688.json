{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { getSelectionControlIOSColor } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n */\nconst CheckboxIOS = _ref => {\n  let {\n    status,\n    disabled,\n    onPress,\n    theme: themeOverrides,\n    testID,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n  const {\n    checkedColor,\n    rippleColor\n  } = getSelectionControlIOSColor({\n    theme,\n    disabled,\n    customColor: rest.color\n  });\n  const icon = indeterminate ? 'minus' : 'check';\n  const opacity = indeterminate || checked ? 1 : 0;\n  return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onPress,\n    disabled: disabled,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      disabled,\n      checked\n    },\n    accessibilityLiveRegion: \"polite\",\n    style: styles.container,\n    testID: testID,\n    theme: theme\n  }), /*#__PURE__*/React.createElement(View, {\n    style: {\n      opacity\n    }\n  }, /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n    allowFontScaling: false,\n    name: icon,\n    size: 24,\n    color: checkedColor,\n    direction: \"ltr\"\n  })));\n};\nCheckboxIOS.displayName = 'Checkbox.IOS';\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default CheckboxIOS;\n\n// @component-docs ignore-next-line\nexport { CheckboxIOS };","map":{"version":3,"names":["React","StyleSheet","View","getSelectionControlIOSColor","useInternalTheme","MaterialCommunityIcon","TouchableRipple","CheckboxIOS","_ref","status","disabled","onPress","theme","themeOverrides","testID","rest","checked","indeterminate","checkedColor","rippleColor","customColor","color","icon","opacity","createElement","_extends","borderless","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","allowFontScaling","name","size","direction","displayName","create","borderRadius","padding"],"sources":["C:\\Users\\Leonidas\\Desktop\\SongRecommendationTool\\src\\srt\\node_modules\\react-native-paper\\src\\components\\Checkbox\\CheckboxIOS.tsx"],"sourcesContent":["import * as React from 'react';\nimport { GestureResponderEvent, StyleSheet, View } from 'react-native';\n\nimport { getSelectionControlIOSColor } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, ThemeProp } from '../../types';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n */\nconst CheckboxIOS = ({\n  status,\n  disabled,\n  onPress,\n  theme: themeOverrides,\n  testID,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const { checkedColor, rippleColor } = getSelectionControlIOSColor({\n    theme,\n    disabled,\n    customColor: rest.color,\n  });\n\n  const icon = indeterminate ? 'minus' : 'check';\n  const opacity = indeterminate || checked ? 1 : 0;\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n      theme={theme}\n    >\n      <View style={{ opacity }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkedColor}\n          direction=\"ltr\"\n        />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default CheckboxIOS;\n\n// @component-docs ignore-next-line\nexport { CheckboxIOS };\n"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAgCC,UAAU,EAAEC,IAAI,QAAQ,cAAc;AAEtE,SAASC,2BAA2B,QAAQ,SAAS;AACrD,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD,OAAOC,qBAAqB,MAAM,0BAA0B;AAC5D,OAAOC,eAAe,MAAM,oCAAoC;AA6BhE;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAGC,IAAA,IAOP;EAAA,IAPQ;IACnBC,MAAM;IACNC,QAAQ;IACRC,OAAO;IACPC,KAAK,EAAEC,cAAc;IACrBC,MAAM;IACN,GAAGC;EACE,CAAC,GAAAP,IAAA;EACN,MAAMI,KAAK,GAAGR,gBAAgB,CAACS,cAAc,CAAC;EAC9C,MAAMG,OAAO,GAAGP,MAAM,KAAK,SAAS;EACpC,MAAMQ,aAAa,GAAGR,MAAM,KAAK,eAAe;EAEhD,MAAM;IAAES,YAAY;IAAEC;EAAY,CAAC,GAAGhB,2BAA2B,CAAC;IAChES,KAAK;IACLF,QAAQ;IACRU,WAAW,EAAEL,IAAI,CAACM;EACpB,CAAC,CAAC;EAEF,MAAMC,IAAI,GAAGL,aAAa,GAAG,OAAO,GAAG,OAAO;EAC9C,MAAMM,OAAO,GAAGN,aAAa,IAAID,OAAO,GAAG,CAAC,GAAG,CAAC;EAEhD,oBACEhB,KAAA,CAAAwB,aAAA,CAAClB,eAAe,EAAAmB,QAAA,KACVV,IAAI;IACRW,UAAU;IACVP,WAAW,EAAEA,WAAY;IACzBR,OAAO,EAAEA,OAAQ;IACjBD,QAAQ,EAAEA,QAAS;IACnBiB,iBAAiB,EAAC,UAAU;IAC5BC,kBAAkB,EAAE;MAAElB,QAAQ;MAAEM;IAAQ,CAAE;IAC1Ca,uBAAuB,EAAC,QAAQ;IAChCC,KAAK,EAAEC,MAAM,CAACC,SAAU;IACxBlB,MAAM,EAAEA,MAAO;IACfF,KAAK,EAAEA;EAAM,iBAEbZ,KAAA,CAAAwB,aAAA,CAACtB,IAAI;IAAC4B,KAAK,EAAE;MAAEP;IAAQ;EAAE,gBACvBvB,KAAA,CAAAwB,aAAA,CAACnB,qBAAqB;IACpB4B,gBAAgB,EAAE,KAAM;IACxBC,IAAI,EAAEZ,IAAK;IACXa,IAAI,EAAE,EAAG;IACTd,KAAK,EAAEH,YAAa;IACpBkB,SAAS,EAAC;EAAK,CAChB,CACG,CACS,CAAC;AAEtB,CAAC;AAED7B,WAAW,CAAC8B,WAAW,GAAG,cAAc;AAExC,MAAMN,MAAM,GAAG9B,UAAU,CAACqC,MAAM,CAAC;EAC/BN,SAAS,EAAE;IACTO,YAAY,EAAE,EAAE;IAChBC,OAAO,EAAE;EACX;AACF,CAAC,CAAC;AAEF,eAAejC,WAAW;;AAE1B;AACA,SAASA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}