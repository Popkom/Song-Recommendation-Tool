{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport { getTextColor } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport AnimatedText from '../Typography/AnimatedText';\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst HelperText = _ref => {\n  let {\n    style,\n    type = 'info',\n    visible = true,\n    theme: themeOverrides,\n    onLayout,\n    padding = 'normal',\n    disabled,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const {\n    current: shown\n  } = React.useRef(new Animated.Value(visible ? 1 : 0));\n  let {\n    current: textHeight\n  } = React.useRef(0);\n  const {\n    scale\n  } = theme.animation;\n  const {\n    maxFontSizeMultiplier = 1.5\n  } = rest;\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, shown]);\n  const handleTextLayout = e => {\n    onLayout === null || onLayout === void 0 ? void 0 : onLayout(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n  const textColor = getTextColor({\n    theme,\n    disabled,\n    type\n  });\n  return /*#__PURE__*/React.createElement(AnimatedText, _extends({\n    onLayout: handleTextLayout,\n    style: [styles.text, padding !== 'none' ? styles.padding : {}, {\n      color: textColor,\n      opacity: shown,\n      transform: visible && type === 'error' ? [{\n        translateY: shown.interpolate({\n          inputRange: [0, 1],\n          outputRange: [-textHeight / 2, 0]\n        })\n      }] : []\n    }, style],\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, rest), rest.children);\n};\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4\n  },\n  padding: {\n    paddingHorizontal: 12\n  }\n});\nexport default HelperText;","map":{"version":3,"names":["React","Animated","StyleSheet","getTextColor","useInternalTheme","AnimatedText","HelperText","_ref","style","type","visible","theme","themeOverrides","onLayout","padding","disabled","rest","current","shown","useRef","Value","textHeight","scale","animation","maxFontSizeMultiplier","useEffect","timing","toValue","duration","useNativeDriver","start","handleTextLayout","e","nativeEvent","layout","height","textColor","createElement","_extends","styles","text","color","opacity","transform","translateY","interpolate","inputRange","outputRange","children","create","fontSize","paddingVertical","paddingHorizontal"],"sources":["C:\\Users\\Leonidas\\Desktop\\SongRecommendationTool\\src\\srt\\node_modules\\react-native-paper\\src\\components\\HelperText\\HelperText.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n} from 'react-native';\n\nimport { getTextColor } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { $Omit, ThemeProp } from '../../types';\nimport AnimatedText from '../Typography/AnimatedText';\n\nexport type Props = $Omit<\n  $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Whether the text input tied with helper text is disabled.\n   */\n  disabled?: boolean;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst HelperText = ({\n  style,\n  type = 'info',\n  visible = true,\n  theme: themeOverrides,\n  onLayout,\n  padding = 'normal',\n  disabled,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { current: shown } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n\n  let { current: textHeight } = React.useRef<number>(0);\n\n  const { scale } = theme.animation;\n\n  const { maxFontSizeMultiplier = 1.5 } = rest;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  const handleTextLayout = (e: LayoutChangeEvent) => {\n    onLayout?.(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  const textColor = getTextColor({ theme, disabled, type });\n\n  return (\n    <AnimatedText\n      onLayout={handleTextLayout}\n      style={[\n        styles.text,\n        padding !== 'none' ? styles.padding : {},\n        {\n          color: textColor,\n          opacity: shown,\n          transform:\n            visible && type === 'error'\n              ? [\n                  {\n                    translateY: shown.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [-textHeight / 2, 0],\n                    }),\n                  },\n                ]\n              : [],\n        },\n        style,\n      ]}\n      maxFontSizeMultiplier={maxFontSizeMultiplier}\n      {...rest}\n    >\n      {rest.children}\n    </AnimatedText>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default HelperText;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}