{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { NativeModules, Platform, Switch as NativeSwitch } from 'react-native';\nimport { getSwitchColor } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nconst version = NativeModules.PlatformConstants ? NativeModules.PlatformConstants.reactNativeVersion : undefined;\n/**\n * Switch is a visual toggle between two mutually exclusive states — on and off.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);\n *\n *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\n *\n *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Switch = _ref => {\n  let {\n    value,\n    disabled,\n    onValueChange,\n    color,\n    theme: themeOverrides,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const {\n    checkedColor,\n    onTintColor,\n    thumbTintColor\n  } = getSwitchColor({\n    theme,\n    disabled,\n    value,\n    color\n  });\n  const props = version && version.major === 0 && version.minor <= 56 ? {\n    onTintColor,\n    thumbTintColor\n  } : Platform.OS === 'web' ? {\n    activeTrackColor: onTintColor,\n    thumbColor: thumbTintColor,\n    activeThumbColor: checkedColor\n  } : {\n    thumbColor: thumbTintColor,\n    trackColor: {\n      true: onTintColor,\n      false: onTintColor\n    }\n  };\n  return /*#__PURE__*/React.createElement(NativeSwitch, _extends({\n    value: value,\n    disabled: disabled,\n    onValueChange: disabled ? undefined : onValueChange\n  }, props, rest));\n};\nexport default Switch;","map":{"version":3,"names":["React","NativeModules","Platform","Switch","NativeSwitch","getSwitchColor","useInternalTheme","version","PlatformConstants","reactNativeVersion","undefined","_ref","value","disabled","onValueChange","color","theme","themeOverrides","rest","checkedColor","onTintColor","thumbTintColor","props","major","minor","OS","activeTrackColor","thumbColor","activeThumbColor","trackColor","true","false","createElement","_extends"],"sources":["C:\\Users\\Leonidas\\Desktop\\SongRecommendationTool\\src\\srt\\node_modules\\react-native-paper\\src\\components\\Switch\\Switch.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  NativeModules,\n  Platform,\n  StyleProp,\n  Switch as NativeSwitch,\n  ViewStyle,\n} from 'react-native';\n\nimport { getSwitchColor } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { ThemeProp } from '../../types';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\nexport type Props = React.ComponentPropsWithRef<typeof NativeSwitch> & {\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean;\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean;\n  /**\n   * Custom color for switch.\n   */\n  color?: string;\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states — on and off.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);\n *\n *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\n *\n *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Switch = ({\n  value,\n  disabled,\n  onValueChange,\n  color,\n  theme: themeOverrides,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { checkedColor, onTintColor, thumbTintColor } = getSwitchColor({\n    theme,\n    disabled,\n    value,\n    color,\n  });\n\n  const props =\n    version && version.major === 0 && version.minor <= 56\n      ? {\n          onTintColor,\n          thumbTintColor,\n        }\n      : Platform.OS === 'web'\n      ? {\n          activeTrackColor: onTintColor,\n          thumbColor: thumbTintColor,\n          activeThumbColor: checkedColor,\n        }\n      : {\n          thumbColor: thumbTintColor,\n          trackColor: {\n            true: onTintColor,\n            false: onTintColor,\n          },\n        };\n\n  return (\n    <NativeSwitch\n      value={value}\n      disabled={disabled}\n      onValueChange={disabled ? undefined : onValueChange}\n      {...props}\n      {...rest}\n    />\n  );\n};\n\nexport default Switch;\n"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SACEC,aAAa,EACbC,QAAQ,EAERC,MAAM,IAAIC,YAAY,QAEjB,cAAc;AAErB,SAASC,cAAc,QAAQ,SAAS;AACxC,SAASC,gBAAgB,QAAQ,oBAAoB;AAGrD,MAAMC,OAAO,GAAGN,aAAa,CAACO,iBAAiB,GAC3CP,aAAa,CAACO,iBAAiB,CAACC,kBAAkB,GAClDC,SAAS;AA0Bb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMP,MAAM,GAAGQ,IAAA,IAOF;EAAA,IAPG;IACdC,KAAK;IACLC,QAAQ;IACRC,aAAa;IACbC,KAAK;IACLC,KAAK,EAAEC,cAAc;IACrB,GAAGC;EACE,CAAC,GAAAP,IAAA;EACN,MAAMK,KAAK,GAAGV,gBAAgB,CAACW,cAAc,CAAC;EAC9C,MAAM;IAAEE,YAAY;IAAEC,WAAW;IAAEC;EAAe,CAAC,GAAGhB,cAAc,CAAC;IACnEW,KAAK;IACLH,QAAQ;IACRD,KAAK;IACLG;EACF,CAAC,CAAC;EAEF,MAAMO,KAAK,GACTf,OAAO,IAAIA,OAAO,CAACgB,KAAK,KAAK,CAAC,IAAIhB,OAAO,CAACiB,KAAK,IAAI,EAAE,GACjD;IACEJ,WAAW;IACXC;EACF,CAAC,GACDnB,QAAQ,CAACuB,EAAE,KAAK,KAAK,GACrB;IACEC,gBAAgB,EAAEN,WAAW;IAC7BO,UAAU,EAAEN,cAAc;IAC1BO,gBAAgB,EAAET;EACpB,CAAC,GACD;IACEQ,UAAU,EAAEN,cAAc;IAC1BQ,UAAU,EAAE;MACVC,IAAI,EAAEV,WAAW;MACjBW,KAAK,EAAEX;IACT;EACF,CAAC;EAEP,oBACEpB,KAAA,CAAAgC,aAAA,CAAC5B,YAAY,EAAA6B,QAAA;IACXrB,KAAK,EAAEA,KAAM;IACbC,QAAQ,EAAEA,QAAS;IACnBC,aAAa,EAAED,QAAQ,GAAGH,SAAS,GAAGI;EAAc,GAChDQ,KAAK,EACLJ,IAAI,CACT,CAAC;AAEN,CAAC;AAED,eAAef,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}