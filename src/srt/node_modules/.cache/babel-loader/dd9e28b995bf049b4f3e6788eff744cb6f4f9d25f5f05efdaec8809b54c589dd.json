{"ast":null,"code":"import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport RadioButton from './RadioButton';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport { RadioButtonContext } from './RadioButtonGroup';\nimport RadioButtonIOS from './RadioButtonIOS';\nimport { handlePress, isChecked } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = _ref => {\n  let {\n    value,\n    label,\n    style,\n    labelStyle,\n    onPress,\n    disabled,\n    color,\n    uncheckedColor,\n    status,\n    theme: themeOverrides,\n    accessibilityLabel = label,\n    testID,\n    mode,\n    position = 'trailing',\n    labelVariant = 'bodyLarge'\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const radioButtonProps = {\n    value,\n    disabled,\n    status,\n    color,\n    theme,\n    uncheckedColor\n  };\n  const isLeading = position === 'leading';\n  let radioButton;\n  if (mode === 'android') {\n    radioButton = /*#__PURE__*/React.createElement(RadioButtonAndroid, radioButtonProps);\n  } else if (mode === 'ios') {\n    radioButton = /*#__PURE__*/React.createElement(RadioButtonIOS, radioButtonProps);\n  } else {\n    radioButton = /*#__PURE__*/React.createElement(RadioButton, radioButtonProps);\n  }\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign\n  };\n  return /*#__PURE__*/React.createElement(RadioButtonContext.Consumer, null, context => {\n    const checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status,\n      value\n    }) === 'checked';\n    return /*#__PURE__*/React.createElement(TouchableRipple, {\n      onPress: event => handlePress({\n        onPress: onPress,\n        onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n        value,\n        event\n      }),\n      accessibilityLabel: accessibilityLabel,\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        checked,\n        disabled\n      },\n      testID: testID,\n      disabled: disabled,\n      theme: theme\n    }, /*#__PURE__*/React.createElement(View, {\n      style: [styles.container, style],\n      pointerEvents: \"none\"\n    }, isLeading && radioButton, /*#__PURE__*/React.createElement(Text, {\n      variant: labelVariant,\n      style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle]\n    }, label), !isLeading && radioButton));\n  });\n};\nRadioButtonItem.displayName = 'RadioButton.Item';\nexport default RadioButtonItem;\n\n// @component-docs ignore-next-line\nexport { RadioButtonItem };\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1\n  },\n  font: {\n    fontSize: 16\n  }\n});","map":{"version":3,"names":["React","StyleSheet","View","RadioButton","RadioButtonAndroid","RadioButtonContext","RadioButtonIOS","handlePress","isChecked","useInternalTheme","TouchableRipple","Text","RadioButtonItem","_ref","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","theme","themeOverrides","accessibilityLabel","testID","mode","position","labelVariant","radioButtonProps","isLeading","radioButton","createElement","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","Consumer","context","checked","contextValue","event","onValueChange","accessibilityRole","accessibilityState","styles","container","pointerEvents","variant","font","displayName","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"sources":["C:\\Users\\Leonidas\\Desktop\\SongRecommendationTool\\src\\srt\\node_modules\\react-native-paper\\src\\components\\RadioButton\\RadioButtonItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport RadioButton from './RadioButton';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport RadioButtonIOS from './RadioButtonIOS';\nimport { handlePress, isChecked } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { ThemeProp, MD3TypescaleKey } from '../../types';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Label text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  labelVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\n   * Left undefined `<RadioButton />` will be used.\n   */\n  mode?: 'android' | 'ios';\n  /**\n   * Radio button control position.\n   */\n  position?: 'leading' | 'trailing';\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme: themeOverrides,\n  accessibilityLabel = label,\n  testID,\n  mode,\n  position = 'trailing',\n  labelVariant = 'bodyLarge',\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const radioButtonProps = {\n    value,\n    disabled,\n    status,\n    color,\n    theme,\n    uncheckedColor,\n  };\n  const isLeading = position === 'leading';\n  let radioButton: any;\n\n  if (mode === 'android') {\n    radioButton = <RadioButtonAndroid {...radioButtonProps} />;\n  } else if (mode === 'ios') {\n    radioButton = <RadioButtonIOS {...radioButtonProps} />;\n  } else {\n    radioButton = <RadioButton {...radioButtonProps} />;\n  }\n\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3\n    ? theme.colors.onSurfaceDisabled\n    : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign,\n  } as TextStyle;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n        return (\n          <TouchableRipple\n            onPress={(event) =>\n              handlePress({\n                onPress: onPress,\n                onValueChange: context?.onValueChange,\n                value,\n                event,\n              })\n            }\n            accessibilityLabel={accessibilityLabel}\n            accessibilityRole=\"radio\"\n            accessibilityState={{\n              checked,\n              disabled,\n            }}\n            testID={testID}\n            disabled={disabled}\n            theme={theme}\n          >\n            <View style={[styles.container, style]} pointerEvents=\"none\">\n              {isLeading && radioButton}\n              <Text\n                variant={labelVariant}\n                style={[\n                  styles.label,\n                  !theme.isV3 && styles.font,\n                  computedStyle,\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n              {!isLeading && radioButton}\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default RadioButtonItem;\n\n// @component-docs ignore-next-line\nexport { RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n  font: {\n    fontSize: 16,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}