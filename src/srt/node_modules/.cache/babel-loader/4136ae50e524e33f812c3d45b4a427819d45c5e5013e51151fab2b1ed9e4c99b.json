{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { I18nManager, StyleSheet, Text as NativeText } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport { forwardRef } from '../../utils/forwardRef';\n// @component-group Typography\n/**\n * Typography component showing styles complied with passed `variant` prop and supported by the type system.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <>\n *     <Text variant=\"displayLarge\">Display Large</Text>\n *     <Text variant=\"displayMedium\">Display Medium</Text>\n *     <Text variant=\"displaySmall\">Display small</Text>\n *\n *     <Text variant=\"headlineLarge\">Headline Large</Text>\n *     <Text variant=\"headlineMedium\">Headline Medium</Text>\n *     <Text variant=\"headlineSmall\">Headline Small</Text>\n *\n *     <Text variant=\"titleLarge\">Title Large</Text>\n *     <Text variant=\"titleMedium\">Title Medium</Text>\n *     <Text variant=\"titleSmall\">Title Small</Text>\n *\n *     <Text variant=\"bodyLarge\">Body Large</Text>\n *     <Text variant=\"bodyMedium\">Body Medium</Text>\n *     <Text variant=\"bodySmall\">Body Small</Text>\n *\n *     <Text variant=\"labelLarge\">Label Large</Text>\n *     <Text variant=\"labelMedium\">Label Medium</Text>\n *     <Text variant=\"labelSmall\">Label Small</Text>\n *  </>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\nconst Text = (_ref, ref) => {\n  let {\n    style,\n    variant,\n    theme: initialTheme,\n    ...rest\n  } = _ref;\n  const root = React.useRef(null);\n  // FIXME: destructure it in TS 4.6+\n  const theme = useInternalTheme(initialTheme);\n  const writingDirection = I18nManager.getConstants().isRTL ? 'rtl' : 'ltr';\n  React.useImperativeHandle(ref, () => ({\n    setNativeProps: args => {\n      var _root$current;\n      return (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.setNativeProps(args);\n    }\n  }));\n  if (theme.isV3 && variant) {\n    let font = theme.fonts[variant];\n    let textStyle = [font, style];\n    if (rest.children && typeof rest.children === 'object' && 'props' in rest.children) {\n      const {\n        props\n      } = rest.children;\n\n      // Context:   Some components have the built-in `Text` component with a predefined variant,\n      //            that also accepts `children` as a `React.Node`. This can result in a situation,\n      //            where another `Text` component is rendered within the built-in `Text` component.\n      //            By doing that, we assume that user doesn't want to consume pre-defined font properties.\n      // Case one:  Nested `Text` has different `variant` that specified in parent. For example:\n      //              <Chip>\n      //                <Text variant=\"displayMedium\">Nested</Text>\n      //              </Chip>\n      // Solution:  To address the following scenario, the code below overrides the `variant`\n      //            specified in a parent in favor of children's variant:\n      if (props.variant) {\n        font = theme.fonts[props.variant];\n        textStyle = [style, font];\n      }\n\n      // Case two:  Nested `Text` has specified `styles` which intefere\n      //            with font properties, from the parent's `variant`. For example:\n      //              <Chip>\n      //                <Text style={{fontSize: 30}}>Nested</Text>\n      //              </Chip>\n      // Solution:  To address the following scenario, the code below overrides the\n      //            parent's style with children's style:\n      if (!props.variant) {\n        textStyle = [style, props.style];\n      }\n    }\n    if (typeof font !== 'object') {\n      throw new Error(`Variant ${variant} was not provided properly. Valid variants are ${Object.keys(theme.fonts).join(', ')}.`);\n    }\n    return /*#__PURE__*/React.createElement(NativeText, _extends({\n      ref: root,\n      style: [styles.text, {\n        writingDirection,\n        color: theme.colors.onSurface\n      }, textStyle]\n    }, rest));\n  } else {\n    var _theme$fonts, _theme$colors;\n    const font = theme.isV3 ? theme.fonts.default : (_theme$fonts = theme.fonts) === null || _theme$fonts === void 0 ? void 0 : _theme$fonts.regular;\n    const textStyle = {\n      ...font,\n      color: theme.isV3 ? (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.onSurface : theme.colors.text\n    };\n    return /*#__PURE__*/React.createElement(NativeText, _extends({}, rest, {\n      ref: root,\n      style: [styles.text, textStyle, {\n        writingDirection\n      }, style]\n    }));\n  }\n};\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left'\n  }\n});\nconst Component = forwardRef(Text);\nexport const customText = () => Component;\nexport default Component;","map":{"version":3,"names":["React","I18nManager","StyleSheet","Text","NativeText","useInternalTheme","forwardRef","_ref","ref","style","variant","theme","initialTheme","rest","root","useRef","writingDirection","getConstants","isRTL","useImperativeHandle","setNativeProps","args","_root$current","current","isV3","font","fonts","textStyle","children","props","Error","Object","keys","join","createElement","_extends","styles","text","color","colors","onSurface","_theme$fonts","_theme$colors","default","regular","create","textAlign","Component","customText"],"sources":["C:\\Users\\Leonidas\\Desktop\\SongRecommendationTool\\src\\srt\\node_modules\\react-native-paper\\src\\components\\Typography\\Text.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  StyleProp,\n  StyleSheet,\n  Text as NativeText,\n  TextStyle,\n} from 'react-native';\n\nimport type { VariantProp } from './types';\nimport { useInternalTheme } from '../../core/theming';\nimport type { ThemeProp } from '../../types';\nimport { forwardRef } from '../../utils/forwardRef';\n\nexport type Props<T> = React.ComponentProps<typeof NativeText> & {\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  variant?: VariantProp<T>;\n  children: React.ReactNode;\n  theme?: ThemeProp;\n  style?: StyleProp<TextStyle>;\n};\n\nexport type TextRef = React.ForwardedRef<{\n  setNativeProps(args: Object): void;\n}>;\n\n// @component-group Typography\n\n/**\n * Typography component showing styles complied with passed `variant` prop and supported by the type system.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <>\n *     <Text variant=\"displayLarge\">Display Large</Text>\n *     <Text variant=\"displayMedium\">Display Medium</Text>\n *     <Text variant=\"displaySmall\">Display small</Text>\n *\n *     <Text variant=\"headlineLarge\">Headline Large</Text>\n *     <Text variant=\"headlineMedium\">Headline Medium</Text>\n *     <Text variant=\"headlineSmall\">Headline Small</Text>\n *\n *     <Text variant=\"titleLarge\">Title Large</Text>\n *     <Text variant=\"titleMedium\">Title Medium</Text>\n *     <Text variant=\"titleSmall\">Title Small</Text>\n *\n *     <Text variant=\"bodyLarge\">Body Large</Text>\n *     <Text variant=\"bodyMedium\">Body Medium</Text>\n *     <Text variant=\"bodySmall\">Body Small</Text>\n *\n *     <Text variant=\"labelLarge\">Label Large</Text>\n *     <Text variant=\"labelMedium\">Label Medium</Text>\n *     <Text variant=\"labelSmall\">Label Small</Text>\n *  </>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\nconst Text = (\n  { style, variant, theme: initialTheme, ...rest }: Props<string>,\n  ref: TextRef\n) => {\n  const root = React.useRef<NativeText | null>(null);\n  // FIXME: destructure it in TS 4.6+\n  const theme = useInternalTheme(initialTheme);\n  const writingDirection = I18nManager.getConstants().isRTL ? 'rtl' : 'ltr';\n\n  React.useImperativeHandle(ref, () => ({\n    setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n  }));\n\n  if (theme.isV3 && variant) {\n    let font = theme.fonts[variant];\n    let textStyle = [font, style];\n\n    if (\n      rest.children &&\n      typeof rest.children === 'object' &&\n      'props' in rest.children\n    ) {\n      const { props } = rest.children;\n\n      // Context:   Some components have the built-in `Text` component with a predefined variant,\n      //            that also accepts `children` as a `React.Node`. This can result in a situation,\n      //            where another `Text` component is rendered within the built-in `Text` component.\n      //            By doing that, we assume that user doesn't want to consume pre-defined font properties.\n      // Case one:  Nested `Text` has different `variant` that specified in parent. For example:\n      //              <Chip>\n      //                <Text variant=\"displayMedium\">Nested</Text>\n      //              </Chip>\n      // Solution:  To address the following scenario, the code below overrides the `variant`\n      //            specified in a parent in favor of children's variant:\n      if (props.variant) {\n        font = theme.fonts[props.variant as VariantProp<typeof props.variant>];\n        textStyle = [style, font];\n      }\n\n      // Case two:  Nested `Text` has specified `styles` which intefere\n      //            with font properties, from the parent's `variant`. For example:\n      //              <Chip>\n      //                <Text style={{fontSize: 30}}>Nested</Text>\n      //              </Chip>\n      // Solution:  To address the following scenario, the code below overrides the\n      //            parent's style with children's style:\n      if (!props.variant) {\n        textStyle = [style, props.style];\n      }\n    }\n\n    if (typeof font !== 'object') {\n      throw new Error(\n        `Variant ${variant} was not provided properly. Valid variants are ${Object.keys(\n          theme.fonts\n        ).join(', ')}.`\n      );\n    }\n\n    return (\n      <NativeText\n        ref={root}\n        style={[\n          styles.text,\n          { writingDirection, color: theme.colors.onSurface },\n          textStyle,\n        ]}\n        {...rest}\n      />\n    );\n  } else {\n    const font = theme.isV3 ? theme.fonts.default : theme.fonts?.regular;\n    const textStyle = {\n      ...font,\n      color: theme.isV3 ? theme.colors?.onSurface : theme.colors.text,\n    };\n    return (\n      <NativeText\n        {...rest}\n        ref={root}\n        style={[styles.text, textStyle, { writingDirection }, style]}\n      />\n    );\n  }\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\ntype TextComponent<T> = (\n  props: Props<T> & { ref?: React.RefObject<TextRef> }\n) => JSX.Element;\n\nconst Component = forwardRef(Text) as TextComponent<never>;\n\nexport const customText = <T,>() => Component as unknown as TextComponent<T>;\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}