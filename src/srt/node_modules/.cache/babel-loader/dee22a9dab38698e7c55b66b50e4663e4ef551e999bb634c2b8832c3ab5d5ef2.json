{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport { getButtonColors } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport hasTouchHandler from '../../utils/hasTouchHandler';\nimport { splitStyles } from '../../utils/splitStyles';\nimport ActivityIndicator from '../ActivityIndicator';\nimport Icon from '../Icon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n/**\n * A button is component that the user can press to trigger an action.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = _ref => {\n  var _StyleSheet$flatten;\n  let {\n    disabled,\n    compact,\n    mode = 'text',\n    dark,\n    loading,\n    icon,\n    buttonColor: customButtonColor,\n    textColor: customTextColor,\n    rippleColor: customRippleColor,\n    children,\n    accessibilityLabel,\n    accessibilityHint,\n    onPress,\n    onPressIn,\n    onPressOut,\n    onLongPress,\n    delayLongPress,\n    style,\n    theme: themeOverrides,\n    uppercase: uppercaseProp,\n    contentStyle,\n    labelStyle,\n    testID = 'button',\n    accessible,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const isMode = React.useCallback(modeToCompare => {\n    return mode === modeToCompare;\n  }, [mode]);\n  const {\n    roundness,\n    isV3,\n    animation\n  } = theme;\n  const uppercase = uppercaseProp ?? !theme.isV3;\n  const hasPassedTouchHandler = hasTouchHandler({\n    onPress,\n    onPressIn,\n    onPressOut,\n    onLongPress\n  });\n  const isElevationEntitled = !disabled && (isV3 ? isMode('elevated') : isMode('contained'));\n  const initialElevation = isV3 ? 1 : 2;\n  const activeElevation = isV3 ? 2 : 8;\n  const {\n    current: elevation\n  } = React.useRef(new Animated.Value(isElevationEntitled ? initialElevation : 0));\n  React.useEffect(() => {\n    elevation.setValue(isElevationEntitled ? initialElevation : 0);\n  }, [isElevationEntitled, elevation, initialElevation]);\n  const handlePressIn = e => {\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      const {\n        scale\n      } = animation;\n      Animated.timing(elevation, {\n        toValue: activeElevation,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n  const handlePressOut = e => {\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      const {\n        scale\n      } = animation;\n      Animated.timing(elevation, {\n        toValue: initialElevation,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n  const flattenedStyles = StyleSheet.flatten(style) || {};\n  const [, borderRadiusStyles] = splitStyles(flattenedStyles, style => style.startsWith('border') && style.endsWith('Radius'));\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const iconSize = isV3 ? 18 : 16;\n  const {\n    backgroundColor,\n    borderColor,\n    textColor,\n    borderWidth\n  } = getButtonColors({\n    customButtonColor,\n    customTextColor,\n    theme,\n    mode,\n    disabled,\n    dark\n  });\n  const rippleColor = customRippleColor || color(textColor).alpha(0.12).rgb().string();\n  const touchableStyle = {\n    ...borderRadiusStyles,\n    borderRadius: borderRadiusStyles.borderRadius ?? borderRadius\n  };\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    ...touchableStyle\n  };\n  const {\n    color: customLabelColor,\n    fontSize: customLabelSize\n  } = StyleSheet.flatten(labelStyle) || {};\n  const font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;\n  const textStyle = {\n    color: textColor,\n    ...font\n  };\n  const iconStyle = ((_StyleSheet$flatten = StyleSheet.flatten(contentStyle)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.flexDirection) === 'row-reverse' ? [styles.iconReverse, isV3 && styles[`md3IconReverse${compact ? 'Compact' : ''}`], isV3 && isMode('text') && styles[`md3IconReverseTextMode${compact ? 'Compact' : ''}`]] : [styles.icon, isV3 && styles[`md3Icon${compact ? 'Compact' : ''}`], isV3 && isMode('text') && styles[`md3IconTextMode${compact ? 'Compact' : ''}`]];\n  return /*#__PURE__*/React.createElement(Surface, _extends({}, rest, {\n    testID: `${testID}-container`,\n    style: [styles.button, compact && styles.compact, buttonStyle, style, !isV3 && {\n      elevation\n    }]\n  }, isV3 && {\n    elevation: elevation\n  }), /*#__PURE__*/React.createElement(TouchableRipple, {\n    borderless: true,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: hasPassedTouchHandler ? handlePressIn : undefined,\n    onPressOut: hasPassedTouchHandler ? handlePressOut : undefined,\n    delayLongPress: delayLongPress,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint,\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled\n    },\n    accessible: accessible,\n    disabled: disabled,\n    rippleColor: rippleColor,\n    style: touchableStyle,\n    testID: testID,\n    theme: theme\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.content, contentStyle]\n  }, icon && loading !== true ? /*#__PURE__*/React.createElement(View, {\n    style: iconStyle,\n    testID: `${testID}-icon-container`\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: icon,\n    size: customLabelSize ?? iconSize,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor\n  })) : null, loading ? /*#__PURE__*/React.createElement(ActivityIndicator, {\n    size: customLabelSize ?? iconSize,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor,\n    style: iconStyle\n  }) : null, /*#__PURE__*/React.createElement(Text, {\n    variant: \"labelLarge\",\n    selectable: false,\n    numberOfLines: 1,\n    testID: `${testID}-text`,\n    style: [styles.label, !isV3 && styles.md2Label, isV3 && (isMode('text') ? icon || loading ? styles.md3LabelTextAddons : styles.md3LabelText : styles.md3Label), compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, labelStyle]\n  }, children))));\n};\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4\n  },\n  /* eslint-disable react-native/no-unused-styles */\n  md3Icon: {\n    marginLeft: 16,\n    marginRight: -16\n  },\n  md3IconCompact: {\n    marginLeft: 8,\n    marginRight: 0\n  },\n  md3IconReverse: {\n    marginLeft: -16,\n    marginRight: 16\n  },\n  md3IconReverseCompact: {\n    marginLeft: 0,\n    marginRight: 8\n  },\n  md3IconTextMode: {\n    marginLeft: 12,\n    marginRight: -8\n  },\n  md3IconTextModeCompact: {\n    marginLeft: 6,\n    marginRight: 0\n  },\n  md3IconReverseTextMode: {\n    marginLeft: -8,\n    marginRight: 12\n  },\n  md3IconReverseTextModeCompact: {\n    marginLeft: 0,\n    marginRight: 6\n  },\n  /* eslint-enable react-native/no-unused-styles */\n  label: {\n    textAlign: 'center',\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  md2Label: {\n    letterSpacing: 1\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  },\n  md3Label: {\n    marginVertical: 10,\n    marginHorizontal: 24\n  },\n  md3LabelText: {\n    marginHorizontal: 12\n  },\n  md3LabelTextAddons: {\n    marginHorizontal: 16\n  }\n});\nexport default Button;","map":{"version":3,"names":["React","Animated","StyleSheet","View","color","getButtonColors","useInternalTheme","hasTouchHandler","splitStyles","ActivityIndicator","Icon","Surface","TouchableRipple","Text","Button","_ref","_StyleSheet$flatten","disabled","compact","mode","dark","loading","icon","buttonColor","customButtonColor","textColor","customTextColor","rippleColor","customRippleColor","children","accessibilityLabel","accessibilityHint","onPress","onPressIn","onPressOut","onLongPress","delayLongPress","style","theme","themeOverrides","uppercase","uppercaseProp","contentStyle","labelStyle","testID","accessible","rest","isMode","useCallback","modeToCompare","roundness","isV3","animation","hasPassedTouchHandler","isElevationEntitled","initialElevation","activeElevation","current","elevation","useRef","Value","useEffect","setValue","handlePressIn","e","scale","timing","toValue","duration","useNativeDriver","start","handlePressOut","flattenedStyles","flatten","borderRadiusStyles","startsWith","endsWith","borderRadius","iconSize","backgroundColor","borderColor","borderWidth","alpha","rgb","string","touchableStyle","buttonStyle","customLabelColor","fontSize","customLabelSize","font","fonts","labelLarge","medium","textStyle","iconStyle","flexDirection","styles","iconReverse","createElement","_extends","button","borderless","undefined","accessibilityRole","accessibilityState","content","source","size","variant","selectable","numberOfLines","label","md2Label","md3LabelTextAddons","md3LabelText","md3Label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","md3Icon","md3IconCompact","md3IconReverse","md3IconReverseCompact","md3IconTextMode","md3IconTextModeCompact","md3IconReverseTextMode","md3IconReverseTextModeCompact","textAlign","marginVertical","marginHorizontal","letterSpacing","textTransform"],"sources":["C:\\Users\\Leonidas\\Desktop\\SongRecommendationTool\\src\\srt\\node_modules\\react-native-paper\\src\\components\\Button\\Button.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  ColorValue,\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { ButtonMode, getButtonColors } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { $Omit, ThemeProp } from '../../types';\nimport hasTouchHandler from '../../utils/hasTouchHandler';\nimport { splitStyles } from '../../utils/splitStyles';\nimport ActivityIndicator from '../ActivityIndicator';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n\nexport type Props = $Omit<React.ComponentProps<typeof Surface>, 'mode'> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline, used for the lowest priority actions, especially when presenting multiple options.\n   * - `outlined` - button with an outline without background, typically used for important, but not primary action – represents medium emphasis.\n   * - `contained` - button with a background color, used for important action, have the most visual impact and high emphasis.\n   * - `elevated` - button with a background color and elevation, used when absolutely necessary e.g. button requires visual separation from a patterned background. @supported Available in v5.x with theme version 3\n   * - `contained-tonal` - button with a secondary background color, an alternative middle ground between contained and outlined buttons. @supported Available in v5.x with theme version 3\n   */\n  mode?: 'text' | 'outlined' | 'contained' | 'elevated' | 'contained-tonal';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for:\n   *  * `contained` mode for theme version 2\n   *  * `contained`, `contained-tonal` and `elevated` modes for theme version 3.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * @deprecated Deprecated in v5.x - use `buttonColor` or `textColor` instead.\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Custom button's background color.\n   */\n  buttonColor?: string;\n  /**\n   * Custom button's text color.\n   */\n  textColor?: string;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute as soon as the touchable element is pressed and invoked even before onPress.\n   */\n  onPressIn?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute as soon as the touch is released even before onPress.\n   */\n  onPressOut?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * The number of milliseconds a user must touch the element before executing `onLongPress`.\n   */\n  delayLongPress?: number;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  buttonColor: customButtonColor,\n  textColor: customTextColor,\n  rippleColor: customRippleColor,\n  children,\n  accessibilityLabel,\n  accessibilityHint,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  delayLongPress,\n  style,\n  theme: themeOverrides,\n  uppercase: uppercaseProp,\n  contentStyle,\n  labelStyle,\n  testID = 'button',\n  accessible,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const isMode = React.useCallback(\n    (modeToCompare: ButtonMode) => {\n      return mode === modeToCompare;\n    },\n    [mode]\n  );\n  const { roundness, isV3, animation } = theme;\n  const uppercase = uppercaseProp ?? !theme.isV3;\n\n  const hasPassedTouchHandler = hasTouchHandler({\n    onPress,\n    onPressIn,\n    onPressOut,\n    onLongPress,\n  });\n\n  const isElevationEntitled =\n    !disabled && (isV3 ? isMode('elevated') : isMode('contained'));\n  const initialElevation = isV3 ? 1 : 2;\n  const activeElevation = isV3 ? 2 : 8;\n\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(isElevationEntitled ? initialElevation : 0)\n  );\n\n  React.useEffect(() => {\n    elevation.setValue(isElevationEntitled ? initialElevation : 0);\n  }, [isElevationEntitled, elevation, initialElevation]);\n\n  const handlePressIn = (e: GestureResponderEvent) => {\n    onPressIn?.(e);\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      const { scale } = animation;\n      Animated.timing(elevation, {\n        toValue: activeElevation,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = (e: GestureResponderEvent) => {\n    onPressOut?.(e);\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      const { scale } = animation;\n      Animated.timing(elevation, {\n        toValue: initialElevation,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const flattenedStyles = (StyleSheet.flatten(style) || {}) as ViewStyle;\n  const [, borderRadiusStyles] = splitStyles(\n    flattenedStyles,\n    (style) => style.startsWith('border') && style.endsWith('Radius')\n  );\n\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const iconSize = isV3 ? 18 : 16;\n\n  const { backgroundColor, borderColor, textColor, borderWidth } =\n    getButtonColors({\n      customButtonColor,\n      customTextColor,\n      theme,\n      mode,\n      disabled,\n      dark,\n    });\n\n  const rippleColor =\n    customRippleColor || color(textColor).alpha(0.12).rgb().string();\n\n  const touchableStyle = {\n    ...borderRadiusStyles,\n    borderRadius: borderRadiusStyles.borderRadius ?? borderRadius,\n  };\n\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    ...touchableStyle,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;\n\n  const textStyle = {\n    color: textColor,\n    ...font,\n  };\n\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? [\n          styles.iconReverse,\n          isV3 && styles[`md3IconReverse${compact ? 'Compact' : ''}`],\n          isV3 &&\n            isMode('text') &&\n            styles[`md3IconReverseTextMode${compact ? 'Compact' : ''}`],\n        ]\n      : [\n          styles.icon,\n          isV3 && styles[`md3Icon${compact ? 'Compact' : ''}`],\n          isV3 &&\n            isMode('text') &&\n            styles[`md3IconTextMode${compact ? 'Compact' : ''}`],\n        ];\n\n  return (\n    <Surface\n      {...rest}\n      testID={`${testID}-container`}\n      style={\n        [\n          styles.button,\n          compact && styles.compact,\n          buttonStyle,\n          style,\n          !isV3 && { elevation },\n        ] as ViewStyle\n      }\n      {...(isV3 && { elevation: elevation })}\n    >\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={hasPassedTouchHandler ? handlePressIn : undefined}\n        onPressOut={hasPassedTouchHandler ? handlePressOut : undefined}\n        delayLongPress={delayLongPress}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n        theme={theme}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle} testID={`${testID}-icon-container`}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? iconSize}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? iconSize}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            selectable={false}\n            numberOfLines={1}\n            testID={`${testID}-text`}\n            style={[\n              styles.label,\n              !isV3 && styles.md2Label,\n              isV3 &&\n                (isMode('text')\n                  ? icon || loading\n                    ? styles.md3LabelTextAddons\n                    : styles.md3LabelText\n                  : styles.md3Label),\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  /* eslint-disable react-native/no-unused-styles */\n  md3Icon: {\n    marginLeft: 16,\n    marginRight: -16,\n  },\n  md3IconCompact: {\n    marginLeft: 8,\n    marginRight: 0,\n  },\n  md3IconReverse: {\n    marginLeft: -16,\n    marginRight: 16,\n  },\n  md3IconReverseCompact: {\n    marginLeft: 0,\n    marginRight: 8,\n  },\n  md3IconTextMode: {\n    marginLeft: 12,\n    marginRight: -8,\n  },\n  md3IconTextModeCompact: {\n    marginLeft: 6,\n    marginRight: 0,\n  },\n  md3IconReverseTextMode: {\n    marginLeft: -8,\n    marginRight: 12,\n  },\n  md3IconReverseTextModeCompact: {\n    marginLeft: 0,\n    marginRight: 6,\n  },\n  /* eslint-enable react-native/no-unused-styles */\n  label: {\n    textAlign: 'center',\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  md2Label: {\n    letterSpacing: 1,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  md3Label: {\n    marginVertical: 10,\n    marginHorizontal: 24,\n  },\n  md3LabelText: {\n    marginHorizontal: 12,\n  },\n  md3LabelTextAddons: {\n    marginHorizontal: 16,\n  },\n});\n\nexport default Button;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}