{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { StyleSheet, useWindowDimensions, View } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport Text from '../Typography/Text';\nconst defaultSize = 64;\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nconst AvatarText = _ref => {\n  var _theme$colors;\n  let {\n    label,\n    size = defaultSize,\n    style,\n    labelStyle,\n    color: customColor,\n    theme: themeOverrides,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const {\n    backgroundColor = (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.primary,\n    ...restStyle\n  } = StyleSheet.flatten(style) || {};\n  const textColor = customColor ?? getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  const {\n    fontScale\n  } = useWindowDimensions();\n  return /*#__PURE__*/React.createElement(View, _extends({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor\n    }, styles.container, restStyle]\n  }, rest), /*#__PURE__*/React.createElement(Text, {\n    style: [styles.text, {\n      color: textColor,\n      fontSize: size / 2,\n      lineHeight: size / fontScale\n    }, labelStyle],\n    numberOfLines: 1\n  }, label));\n};\nAvatarText.displayName = 'Avatar.Text';\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center'\n  }\n});\nexport default AvatarText;","map":{"version":3,"names":["React","StyleSheet","useWindowDimensions","View","useInternalTheme","white","getContrastingColor","Text","defaultSize","AvatarText","_ref","_theme$colors","label","size","style","labelStyle","color","customColor","theme","themeOverrides","rest","backgroundColor","colors","primary","restStyle","flatten","textColor","fontScale","createElement","_extends","width","height","borderRadius","styles","container","text","fontSize","lineHeight","numberOfLines","displayName","create","justifyContent","alignItems","textAlign","textAlignVertical"],"sources":["C:\\Users\\Leonidas\\Desktop\\SongRecommendationTool\\src\\srt\\node_modules\\react-native-paper\\src\\components\\Avatar\\AvatarText.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  useWindowDimensions,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { ThemeProp } from '../../types';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport Text from '../Typography/Text';\n\nconst defaultSize = 64;\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Initials to show as the text in the `Avatar`.\n   */\n  label: string;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Style for text container\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the title.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nconst AvatarText = ({\n  label,\n  size = defaultSize,\n  style,\n  labelStyle,\n  color: customColor,\n  theme: themeOverrides,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { backgroundColor = theme.colors?.primary, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor =\n    customColor ??\n    getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  const { fontScale } = useWindowDimensions();\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      <Text\n        style={[\n          styles.text,\n          {\n            color: textColor,\n            fontSize: size / 2,\n            lineHeight: size / fontScale,\n          },\n          labelStyle,\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </Text>\n    </View>\n  );\n};\n\nAvatarText.displayName = 'Avatar.Text';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n  },\n});\n\nexport default AvatarText;\n"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAEEC,UAAU,EAEVC,mBAAmB,EACnBC,IAAI,QAEC,cAAc;AAErB,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,KAAK,QAAQ,+BAA+B;AAErD,OAAOC,mBAAmB,MAAM,iCAAiC;AACjE,OAAOC,IAAI,MAAM,oBAAoB;AAErC,MAAMC,WAAW,GAAG,EAAE;AA6BtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAGC,IAAA,IAQN;EAAA,IAAAC,aAAA;EAAA,IARO;IAClBC,KAAK;IACLC,IAAI,GAAGL,WAAW;IAClBM,KAAK;IACLC,UAAU;IACVC,KAAK,EAAEC,WAAW;IAClBC,KAAK,EAAEC,cAAc;IACrB,GAAGC;EACE,CAAC,GAAAV,IAAA;EACN,MAAMQ,KAAK,GAAGd,gBAAgB,CAACe,cAAc,CAAC;EAC9C,MAAM;IAAEE,eAAe,IAAAV,aAAA,GAAGO,KAAK,CAACI,MAAM,cAAAX,aAAA,uBAAZA,aAAA,CAAcY,OAAO;IAAE,GAAGC;EAAU,CAAC,GAC7DvB,UAAU,CAACwB,OAAO,CAACX,KAAK,CAAC,IAAI,CAAC,CAAC;EACjC,MAAMY,SAAS,GACbT,WAAW,IACXX,mBAAmB,CAACe,eAAe,EAAEhB,KAAK,EAAE,oBAAoB,CAAC;EACnE,MAAM;IAAEsB;EAAU,CAAC,GAAGzB,mBAAmB,CAAC,CAAC;EAE3C,oBACEF,KAAA,CAAA4B,aAAA,CAACzB,IAAI,EAAA0B,QAAA;IACHf,KAAK,EAAE,CACL;MACEgB,KAAK,EAAEjB,IAAI;MACXkB,MAAM,EAAElB,IAAI;MACZmB,YAAY,EAAEnB,IAAI,GAAG,CAAC;MACtBQ;IACF,CAAC,EACDY,MAAM,CAACC,SAAS,EAChBV,SAAS;EACT,GACEJ,IAAI,gBAERpB,KAAA,CAAA4B,aAAA,CAACrB,IAAI;IACHO,KAAK,EAAE,CACLmB,MAAM,CAACE,IAAI,EACX;MACEnB,KAAK,EAAEU,SAAS;MAChBU,QAAQ,EAAEvB,IAAI,GAAG,CAAC;MAClBwB,UAAU,EAAExB,IAAI,GAAGc;IACrB,CAAC,EACDZ,UAAU,CACV;IACFuB,aAAa,EAAE;EAAE,GAEhB1B,KACG,CACF,CAAC;AAEX,CAAC;AAEDH,UAAU,CAAC8B,WAAW,GAAG,aAAa;AAEtC,MAAMN,MAAM,GAAGhC,UAAU,CAACuC,MAAM,CAAC;EAC/BN,SAAS,EAAE;IACTO,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd,CAAC;EACDP,IAAI,EAAE;IACJQ,SAAS,EAAE,QAAQ;IACnBC,iBAAiB,EAAE;EACrB;AACF,CAAC,CAAC;AAEF,eAAenC,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}